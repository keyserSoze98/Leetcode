class Solution {
    fun numMagicSquaresInside(grid: Array<IntArray>): Int {
        var count = 0

        for (i in 0..grid.size - 3) {
            for (j in 0..grid[0].size - 3) {
                if (isMagicSquare(grid, i, j)) {
                    count++
                }
            }
        }

        return count
    }

    private fun isMagicSquare(grid: Array<IntArray>, i: Int, j: Int): Boolean {
        val s = mutableListOf<Int>()

        for (r in 0..2) {
            for (c in 0..2) {
                s.add(grid[i + r][j + c])
            }
        }
        
        if (s.toSet().size != 9 || s.any { it !in 1..9 }) return false
        
        val sum = s[0] + s[1] + s[2]
        
        return (s[3] + s[4] + s[5] == sum &&
                s[6] + s[7] + s[8] == sum &&
                s[0] + s[3] + s[6] == sum &&
                s[1] + s[4] + s[7] == sum &&
                s[2] + s[5] + s[8] == sum &&
                s[0] + s[4] + s[8] == sum &&
                s[2] + s[4] + s[6] == sum)
    }
}
