class MyStack {

    private Queue<Integer> primaryQueue;
    private Queue<Integer> secondaryQueue;

    public MyStack() {
        primaryQueue = new LinkedList<>();
        secondaryQueue = new LinkedList<>();
    }
    
    public void push(int x) {
        while (!primaryQueue.isEmpty())
            secondaryQueue.offer(primaryQueue.poll());

        primaryQueue.offer(x);

        while (!secondaryQueue.isEmpty())
            primaryQueue.offer(secondaryQueue.poll());
    }
    
    public int pop() {
        if (empty())
            throw new IllegalStateException("Stack is Empty!");

        return primaryQueue.poll();
    }
    
    public int top() {
        if (empty())
            throw new IllegalStateException("Stack is Empty!");

        return primaryQueue.peek();
    }
    
    public boolean empty() {
        return primaryQueue.isEmpty();
    }
}
