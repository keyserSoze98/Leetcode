public class Solution {
    private TreeNode lca(TreeNode root, int startValue, int destValue) {
        if (root == null || root.val == startValue || root.val == destValue) return root;
        TreeNode left = lca(root.left, startValue, destValue);
        TreeNode right = lca(root.right, startValue, destValue);
        if (left != null && right != null) return root;
        return left != null ? left : right;
    }
    
    private boolean findPath(TreeNode root, int value, StringBuilder path) {
        if (root == null) return false;
        if (root.val == value) return true;
        path.append('L');
        if (findPath(root.left, value, path)) return true;
        path.setLength(path.length() - 1);
        path.append('R');
        if (findPath(root.right, value, path)) return true;
        path.setLength(path.length() - 1);
        return false;
    }
    
    public String getDirections(TreeNode root, int startValue, int destValue) {
        TreeNode lca = lca(root, startValue, destValue);
        
        StringBuilder pathToStart = new StringBuilder();
        StringBuilder pathToDest = new StringBuilder();
        
        findPath(lca, startValue, pathToStart);
        findPath(lca, destValue, pathToDest);
        
        for (int i = 0; i < pathToStart.length(); i++) {
            pathToStart.setCharAt(i, 'U');
        }
        
        return pathToStart.toString() + pathToDest.toString();
    }
}
