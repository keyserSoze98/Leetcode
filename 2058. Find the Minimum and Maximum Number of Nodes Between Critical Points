class Solution {
    public int[] nodesBetweenCriticalPoints(ListNode head) {
        if (head == null || head.next == null || head.next.next == null) {
            return new int[]{-1, -1};
        }
        
        ListNode prev = head;
        ListNode curr = head.next;
        int index = 1;
        int firstCritical = -1, lastCritical = -1;
        int minDistance = Integer.MAX_VALUE, maxDistance = Integer.MIN_VALUE;
        List<Integer> criticalPoints = new ArrayList<>();

        while (curr.next != null) {
            ListNode next = curr.next;
            if ((curr.val > prev.val && curr.val > next.val) ||
                (curr.val < prev.val && curr.val < next.val)) {
                criticalPoints.add(index);
                if (firstCritical == -1) {
                    firstCritical = index;
                } else {
                    minDistance = Math.min(minDistance, index - lastCritical);
                }
                lastCritical = index;
            }
            prev = curr;
            curr = next;
            index++;
        }

        if (criticalPoints.size() < 2) {
            return new int[]{-1, -1};
        }

        maxDistance = criticalPoints.get(criticalPoints.size() - 1) - criticalPoints.get(0);

        return new int[]{minDistance, maxDistance};
    }
}
